{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\Hotel Management System\\\\Hotel_Management_System-React-TS\\\\src\\\\components\\\\imageUpload\\\\ImageUpload.tsx\",\n  _s = $RefreshSig$();\n// import { FormHelperText } from '@mui/material';\n// import React, { useCallback } from 'react';\n// import { Controller, useController, useFormContext } from 'react-hook-form';\n//\n// type FileUpLoaderProps = {\n//     multiple?: boolean;\n//     name: string;\n// };\n// const FileUpLoader: React.FC<FileUpLoaderProps> = ({\n//                                                        name,\n//                                                        multiple = false,\n//                                                    }) => {\n//     const {\n//         control,\n//         formState: { errors },\n//     } = useFormContext();\n//     const { field } = useController({ name, control });\n//\n//     const onFileDrop = useCallback(\n//         (e: React.SyntheticEvent<EventTarget>) => {\n//             const target = e.target as HTMLInputElement;\n//             if (!target.files) return;\n//             const newFile = Object.values(target.files).map((file: File) => file);\n//             field.onChange(newFile[0]);\n//         },\n//\n//         [field]\n//     );\n//     // @ts-ignore\n//     // @ts-ignore\n//     return (\n//         <Controller\n//             name={name}\n//             defaultValue=''\n//             control={control}\n//             render={({ field: { name, onBlur, ref } }) => (\n//                 <>\n//                     <input\n//                         type='file'\n//                         name={name}\n//                         onBlur={onBlur}\n//                         ref={ref}\n//                         onChange={onFileDrop}\n//                         multiple={multiple}\n//                         accept='image/jpg, image/png, image/jpeg'\n//                     />\n//                     <FormHelperText error={!!errors[name]}>\n//                         {errors[name] ? errors[name]?.message : ''}\n//                     </FormHelperText>\n//                 </>\n//             )}\n//         />\n//     );\n// };\n\n// export default FileUpLoader;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageUpload = _ref => {\n  _s();\n  let {\n    onUpload,\n    value\n  } = _ref;\n  const [image, setImage] = useState(undefined);\n  const [preview, setPreview] = useState(undefined);\n  const handleImageChange = event => {\n    const selectedImage = event.target.files && event.target.files[0];\n    if (selectedImage) {\n      setImage(selectedImage);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result);\n      };\n      reader.readAsDataURL(selectedImage);\n    } else {\n      setImage(undefined);\n      setPreview(undefined);\n    }\n  };\n  const handleUpload = () => {\n    if (image) {\n      setImage(undefined);\n      setPreview(undefined);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), preview && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: value !== null && value !== void 0 ? value : preview,\n      alt: \"Selected image preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected file: \", image.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageUpload, \"CHlRgDV8qf2oQrQP5ruNA3tzInY=\");\n_c = ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","ImageUpload","onUpload","value","image","setImage","undefined","preview","setPreview","handleImageChange","event","selectedImage","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleUpload","name"],"sources":["C:/Users/DELL/Documents/Hotel Management System/Hotel_Management_System-React-TS/src/components/imageUpload/ImageUpload.tsx"],"sourcesContent":["// import { FormHelperText } from '@mui/material';\r\n// import React, { useCallback } from 'react';\r\n// import { Controller, useController, useFormContext } from 'react-hook-form';\r\n//\r\n// type FileUpLoaderProps = {\r\n//     multiple?: boolean;\r\n//     name: string;\r\n// };\r\n// const FileUpLoader: React.FC<FileUpLoaderProps> = ({\r\n//                                                        name,\r\n//                                                        multiple = false,\r\n//                                                    }) => {\r\n//     const {\r\n//         control,\r\n//         formState: { errors },\r\n//     } = useFormContext();\r\n//     const { field } = useController({ name, control });\r\n//\r\n//     const onFileDrop = useCallback(\r\n//         (e: React.SyntheticEvent<EventTarget>) => {\r\n//             const target = e.target as HTMLInputElement;\r\n//             if (!target.files) return;\r\n//             const newFile = Object.values(target.files).map((file: File) => file);\r\n//             field.onChange(newFile[0]);\r\n//         },\r\n//\r\n//         [field]\r\n//     );\r\n//     // @ts-ignore\r\n//     // @ts-ignore\r\n//     return (\r\n//         <Controller\r\n//             name={name}\r\n//             defaultValue=''\r\n//             control={control}\r\n//             render={({ field: { name, onBlur, ref } }) => (\r\n//                 <>\r\n//                     <input\r\n//                         type='file'\r\n//                         name={name}\r\n//                         onBlur={onBlur}\r\n//                         ref={ref}\r\n//                         onChange={onFileDrop}\r\n//                         multiple={multiple}\r\n//                         accept='image/jpg, image/png, image/jpeg'\r\n//                     />\r\n//                     <FormHelperText error={!!errors[name]}>\r\n//                         {errors[name] ? errors[name]?.message : ''}\r\n//                     </FormHelperText>\r\n//                 </>\r\n//             )}\r\n//         />\r\n//     );\r\n// };\r\n\r\n// export default FileUpLoader;\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\ninterface ImageUploadProps {\r\n    onUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    value: string;\r\n}\r\n\r\nexport const ImageUpload: React.FC<ImageUploadProps> = ({ onUpload, value }) => {\r\n    const [image, setImage] = useState<File | undefined>(undefined);\r\n    const [preview, setPreview] = useState<string | undefined>(undefined);\r\n\r\n    const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const selectedImage = event.target.files && event.target.files[0];\r\n\r\n        if (selectedImage) {\r\n            setImage(selectedImage);\r\n\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setPreview(reader.result as string);\r\n            };\r\n            reader.readAsDataURL(selectedImage);\r\n        } else {\r\n            setImage(undefined);\r\n            setPreview(undefined);\r\n        }\r\n    };\r\n\r\n    const handleUpload = () => {\r\n        if (image) {\r\n\r\n            setImage(undefined);\r\n            setPreview(undefined);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" onChange={handleImageChange} />\r\n            {preview && <img src={value ?? preview}  alt=\"Selected image preview\" />}\r\n            {image && (\r\n                <div>\r\n                    <p>Selected file: {image.name}</p>\r\n                    <button onClick={handleUpload}>Upload</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAOxC,OAAO,MAAMC,WAAuC,GAAG,QAAyB;EAAA;EAAA,IAAxB;IAAEC,QAAQ;IAAEC;EAAM,CAAC;EACvE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAmBM,SAAS,CAAC;EAC/D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAqBM,SAAS,CAAC;EAErE,MAAMG,iBAAiB,GAAIC,KAA0C,IAAK;IACtE,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,IAAIH,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAEjE,IAAIF,aAAa,EAAE;MACfN,QAAQ,CAACM,aAAa,CAAC;MAEvB,MAAMG,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACrBR,UAAU,CAACM,MAAM,CAACG,MAAM,CAAW;MACvC,CAAC;MACDH,MAAM,CAACI,aAAa,CAACP,aAAa,CAAC;IACvC,CAAC,MAAM;MACHN,QAAQ,CAACC,SAAS,CAAC;MACnBE,UAAU,CAACF,SAAS,CAAC;IACzB;EACJ,CAAC;EAED,MAAMa,YAAY,GAAG,MAAM;IACvB,IAAIf,KAAK,EAAE;MAEPC,QAAQ,CAACC,SAAS,CAAC;MACnBE,UAAU,CAACF,SAAS,CAAC;IACzB;EACJ,CAAC;EAED,oBACI;IAAA,wBACI;MAAO,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEG;IAAkB;MAAA;MAAA;MAAA;IAAA,QAAG,EACjDF,OAAO,iBAAI;MAAK,GAAG,EAAEJ,KAAK,aAALA,KAAK,cAALA,KAAK,GAAII,OAAQ;MAAE,GAAG,EAAC;IAAwB;MAAA;MAAA;MAAA;IAAA,QAAG,EACvEH,KAAK,iBACF;MAAA,wBACI;QAAA,WAAG,iBAAe,EAACA,KAAK,CAACgB,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eAClC;QAAQ,OAAO,EAAED,YAAa;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAErD;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GAzCWlB,WAAuC;AAAA,KAAvCA,WAAuC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}