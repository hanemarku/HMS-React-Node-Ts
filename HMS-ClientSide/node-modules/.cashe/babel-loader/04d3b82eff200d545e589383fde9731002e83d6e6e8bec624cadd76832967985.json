{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './state/authSlice';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { authApi } from \"./api/authAPi\";\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    [authApi.reducerPath]: authApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(authApi.middleware)\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\nsetupListeners(store.dispatch);","map":{"version":3,"names":["configureStore","counterReducer","setupListeners","authApi","store","reducer","counter","reducerPath","middleware","getDefaultMiddleware","concat","dispatch"],"sources":["C:/Users/DELL/Documents/Hotel Management System/Hotel_Management_System-React-TS/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\nimport counterReducer from './state/authSlice'\r\n\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport {authApi} from \"./api/authAPi\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n        [authApi.reducerPath]: authApi.reducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().concat(authApi.middleware),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\nsetupListeners(store.dispatch)"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,mBAAmB;AAE9C,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAAQC,OAAO,QAAO,eAAe;AAErC,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAChCK,OAAO,EAAE;IACLC,OAAO,EAAEL,cAAc;IACvB,CAACE,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACE;EACnC,CAAC;EACDG,UAAU,EAAGC,oBAAoB,IAC7BA,oBAAoB,EAAE,CAACC,MAAM,CAACP,OAAO,CAACK,UAAU;AACxD,CAAC,CAAC;;AAEF;;AAIAN,cAAc,CAACE,KAAK,CAACO,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}