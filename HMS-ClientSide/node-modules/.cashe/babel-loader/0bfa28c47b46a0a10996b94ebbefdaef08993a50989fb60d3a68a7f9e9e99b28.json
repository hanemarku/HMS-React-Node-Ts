{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// Define a service using a base URL and expected endpoints\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:9000\"\n  }),\n  endpoints: builder => ({\n    signinUser: builder.mutation({\n      query: body => {\n        return {\n          url: \"http://localhost:3300/user/signin\",\n          method: \"post\",\n          body\n        };\n      }\n    }),\n    signupUser: builder.mutation({\n      query: body => {\n        return {\n          url: \"http://localhost:3300/user/signup\",\n          method: \"post\",\n          body\n        };\n      }\n    })\n    // sendMailForVerification: builder.mutation({\n    //   query: (body: { email: string }) => {\n    //     return {\n    //       url: \"/user/send-verification-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // verifyUser: builder.mutation({\n    //   query: (body: { token: string }) => {\n    //     console.log(body.token);\n    //\n    //     return {\n    //       url: \"/user/verfiy-user-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // sendMailForgotPassword: builder.mutation({\n    //   query: (body: { email: string }) => {\n    //     return {\n    //       url: \"/user/forgot-password\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // resetPassword: builder.mutation({\n    //   query: (body: { token: string; password: string }) => {\n    //     return {\n    //       url: \"/user/verify-forgot-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n  })\n});\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const {\n  useSigninUserMutation,\n  useSignupUserMutation\n  // useSendMailForVerificationMutation,\n  // useVerifyUserMutation,\n  // useSendMailForgotPasswordMutation,\n  // useResetPasswordMutation,\n} = authApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","authApi","reducerPath","baseQuery","baseUrl","endpoints","builder","signinUser","mutation","query","body","url","method","signupUser","useSigninUserMutation","useSignupUserMutation"],"sources":["C:/Users/DELL/Documents/Hotel Management System/Hotel_Management_System-React-TS/src/store/api/authApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// Define a service using a base URL and expected endpoints\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:9000\" }),\n  endpoints: (builder) => ({\n    signinUser: builder.mutation({\n      query: (body: { email: string; password: string }) => {\n        return {\n          url: \"http://localhost:3300/user/signin\",\n          method: \"post\",\n          body,\n        };\n      },\n    }),\n    signupUser: builder.mutation({\n      query: (body: { name: string; email: string; password: string }) => {\n        return {\n          url: \"http://localhost:3300/user/signup\",\n          method: \"post\",\n          body,\n        };\n      },\n    }),\n    // sendMailForVerification: builder.mutation({\n    //   query: (body: { email: string }) => {\n    //     return {\n    //       url: \"/user/send-verification-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // verifyUser: builder.mutation({\n    //   query: (body: { token: string }) => {\n    //     console.log(body.token);\n    //\n    //     return {\n    //       url: \"/user/verfiy-user-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // sendMailForgotPassword: builder.mutation({\n    //   query: (body: { email: string }) => {\n    //     return {\n    //       url: \"/user/forgot-password\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n    // resetPassword: builder.mutation({\n    //   query: (body: { token: string; password: string }) => {\n    //     return {\n    //       url: \"/user/verify-forgot-mail\",\n    //       method: \"post\",\n    //       body,\n    //     };\n    //   },\n    // }),\n  }),\n});\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const {\n  useSigninUserMutation,\n  useSignupUserMutation,\n  // useSendMailForVerificationMutation,\n  // useVerifyUserMutation,\n  // useSendMailForgotPasswordMutation,\n  // useResetPasswordMutation,\n} = authApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;;AAExE;AACA,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,SAAS;EACtBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC/DC,SAAS,EAAGC,OAAO,KAAM;IACvBC,UAAU,EAAED,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAGC,IAAyC,IAAK;QACpD,OAAO;UACLC,GAAG,EAAE,mCAAmC;UACxCC,MAAM,EAAE,MAAM;UACdF;QACF,CAAC;MACH;IACF,CAAC,CAAC;IACFG,UAAU,EAAEP,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAGC,IAAuD,IAAK;QAClE,OAAO;UACLC,GAAG,EAAE,mCAAmC;UACxCC,MAAM,EAAE,MAAM;UACdF;QACF,CAAC;MACH;IACF,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAM;EACXI,qBAAqB;EACrBC;EACA;EACA;EACA;EACA;AACF,CAAC,GAAGd,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}